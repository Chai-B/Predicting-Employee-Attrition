import pandas as pdimport numpy as npfrom sklearn.model_selection import train_test_splitfrom sklearn.preprocessing import StandardScaler, LabelEncoderfrom sklearn.linear_model import LogisticRegressionfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_scorefrom sklearn.model_selection import GridSearchCVdf = pd.read_csv('dataset.csv')print(df.info())print(df.describe())df = df.dropna()le = LabelEncoder()df['BusinessTravel'] = le.fit_transform(df['BusinessTravel'])df['Department'] = le.fit_transform(df['Department'])df['EducationField'] = le.fit_transform(df['EducationField'])df['Gender'] = le.fit_transform(df['Gender'])df['JobRole'] = le.fit_transform(df['JobRole'])df['MaritalStatus'] = le.fit_transform(df['MaritalStatus'])df['Over18'] = le.fit_transform(df['Over18'])df['OverTime'] = le.fit_transform(df['OverTime'])scaler = StandardScaler()df[['Age', 'DailyRate', 'DistanceFromHome', 'HourlyRate', 'MonthlyIncome', 'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']] = scaler.fit_transform(df[['Age', 'DailyRate', 'DistanceFromHome', 'HourlyRate', 'MonthlyIncome', 'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']])X = df.drop('Attrition', axis=1)y = df['Attrition']X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)model = LogisticRegression()model.fit(X_train, y_train)y_pred = model.predict(X_test)print(f'Model: {model}')print(f'Accuracy: {accuracy_score(y_test, y_pred)}')print(f'Precision: {precision_score(y_test, y_pred, pos_label="Yes")}')print(f'Recall: {recall_score(y_test, y_pred, pos_label="Yes")}')print(f'F1-score: {f1_score(y_test, y_pred, pos_label="Yes")}')params = {'C': [0.01, 0.1, 1, 10, 100]}grid_search = GridSearchCV(model, params, cv=5, scoring='f1_macro')grid_search.fit(X_train, y_train)print(f'Best parameters: {grid_search.best_params_}')print(f'Best F1-score: {grid_search.best_score_}')